//
//  MessagesViewController.swift
//  Winchester-iMessage
//
//  Created by Todd Olsen on 11/17/16.
//  Copyright Â© 2016 Todd Olsen. All rights reserved.
//

import UIKit
import Messages
import Endgame

class MessagesViewController: MSMessagesAppViewController {

    override func willBecomeActive(with conversation: MSConversation) {
        super.willBecomeActive(with: conversation)
        presentViewController(for: conversation, with: presentationStyle)
    }


    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.willTransition(to: presentationStyle)
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentViewController(for: conversation, with: presentationStyle)
    }

    // MARK: Child view controller presentation

    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {

        // Determine the controller to present.
        let controller: UIViewController
        switch presentationStyle {
        case .compact:
            controller = instantiateChessGamesViewController(with: conversation)
        case .expanded:
            controller = instantiateGameViewController(with: conversation)
        }

        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }

        // Embed the new controller.
        addChildViewController(controller)
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)

        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true

        controller.didMove(toParentViewController: self)

    }

    private func instantiateChessGamesViewController(with conversation: MSConversation) -> ChessGamesViewController {

        let interlocutorID = conversation.remoteParticipantIdentifiers
            .map { $0.uuidString }
            .reduce("") { $0 + $1 }
        guard let vc = storyboard?.instantiateViewController(withIdentifier: "ChessGamesViewController") as? ChessGamesViewController else { fatalError() }
        vc.opponent = Opponent(id: interlocutorID)
        return vc
    }

    private func instantiateGameViewController(with conversation: MSConversation) -> UIViewController {
        let game = Game(message: conversation.selectedMessage) ?? Game()
        return UIViewController()
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    

    


}

extension MessagesViewController: ChessGamesViewControllerDelegate {
    func chessGamesViewControllerDidSelectCreate(_ controller: ChessGamesViewController) {
        requestPresentationStyle(.expanded)
    }
}
